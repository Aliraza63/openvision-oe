diff -Naur e2openplugin-OpenWebif.orig/plugin/controllers/models/grab.py e2openplugin-OpenWebif/plugin/controllers/models/grab.py
--- e2openplugin-OpenWebif.orig/plugin/controllers/models/grab.py	2018-02-13 21:24:40.108145387 +0100
+++ e2openplugin-OpenWebif/plugin/controllers/models/grab.py	2018-02-15 10:46:53.274365327 +0100
@@ -13,16 +13,24 @@
 
 GRAB_PATH = '/usr/bin/grab'
 
-class GrabRequest(object):
-	def __init__(self, request, session):
-		self.request = request
+class grabScreenshot(resource.Resource):
+	def __init__(self, session, path = None):
+		resource.Resource.__init__(self)
+		self.session = session
+		self.container = eConsoleAppContainer()
+		self.container.appClosed.append(self.grabFinished)
+		self.container.stdoutAvail.append(self.grabData)
+		self.container.setBufferSize(32768)
 
+	def render(self, request):
+		self.request = request
 		graboptions = [GRAB_PATH, '-q', '-s']
 
 		if "format" in request.args:
 			fileformat = request.args["format"][0]
 		else:
 			fileformat = "jpg"
+
 		if fileformat == "jpg":
 			graboptions.append("-j")
 			graboptions.append("95")
@@ -42,47 +50,25 @@
 				graboptions.append("-o")
 			elif mode == "video":
 				graboptions.append("-v")
-		self.container = eConsoleAppContainer()
-		self.container.appClosed.append(self.grabFinished)
-		self.container.stdoutAvail.append(request.write)
-		self.container.setBufferSize(32768)
+
 		self.container.execute(GRAB_PATH, *graboptions)
+
 		try:
-			ref = session.nav.getCurrentlyPlayingServiceReference().toString()
+			ref = self.session.nav.getCurrentlyPlayingServiceReference().toString()
 			sref = '_'.join(ref.split(':', 10)[:10])
 		except:
 			sref = 'screenshot'
-		request.notifyFinish().addErrback(self.requestAborted)
-		request.setHeader('Content-Disposition', 'inline; filename=%s.%s;' % (sref, fileformat))
-		request.setHeader('Content-Type','image/%s' % fileformat.replace("jpg","jpeg"))
-		request.setHeader('Expires','Sat, 26 Jul 1997 05:00:00 GMT')
-		request.setHeader('Cache-Control','no-store, no-cache, must-revalidate, post-check=0, pre-check=0')
-		request.setHeader('Pragma','no-cache')
-
-	def requestAborted(self, err):
-		# Called when client disconnected early, abort the process and
-		# don't call request.finish()
-		del self.container.appClosed[:]
-		self.container.kill()
-		del self.request
-		del self.container
+
+		self.request.setHeader('Content-Disposition', 'inline; filename=%s.%s;' % (sref, fileformat))
+		self.request.setHeader('Content-Type','image/%s' % fileformat)
+		return server.NOT_DONE_YET
+
+	def grabData(self, data):
+		self.request.write(data)
 
 	def grabFinished(self, retval = None):
 		try:
 			self.request.finish()
 		except RuntimeError, error:
 			print "[OpenWebif] grabFinished error: %s" % error
-		# Break the chain of ownership
 		del self.request
-
-class grabScreenshot(resource.Resource):
-	def __init__(self, session, path = None):
-		resource.Resource.__init__(self)
-		self.session = session
-
-	def render(self, request):
-		# Add a reference to the grabber to the Request object. This keeps
-		# the object alive at least until the request finishes
-		request.grab_in_progress = GrabRequest(request, self.session)
-		return server.NOT_DONE_YET
-
