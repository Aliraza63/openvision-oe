diff -Naur e2openplugin-OpenWebif/plugin/controllers/models/grab.py e2openplugin-OpenWebif.orig/plugin/controllers/models/grab.py
--- e2openplugin-OpenWebif/plugin/controllers/models/grab.py	2018-02-15 18:05:46.093774123 +0100
+++ e2openplugin-OpenWebif.orig/plugin/controllers/models/grab.py	2018-02-13 21:24:40.108145387 +0100
@@ -9,88 +9,80 @@
 #                                                                            #
 ##############################################################################
 from enigma import eConsoleAppContainer
-from twisted.web import static, resource, http, server
-import os
+from twisted.web import resource, server
 
 GRAB_PATH = '/usr/bin/grab'
 
-class grabScreenshot(resource.Resource):
-	def __init__(self,session, path = ""):
-		resource.Resource.__init__(self)
-		self.session = session
-		self.container = eConsoleAppContainer()
-		self.container.appClosed.append(self.grabFinished)
-		# self.container.dataAvail.append(self.grabData)
-
-	def render(self, request):
+class GrabRequest(object):
+	def __init__(self, request, session):
 		self.request = request
-		graboptions = [GRAB_PATH]
 
-		if "format" in request.args.keys():
-			self.fileformat = request.args["format"][0]
-		else:
-			self.fileformat = "jpg"
+		graboptions = [GRAB_PATH, '-q', '-s']
 
-		if self.fileformat == "jpg":
+		if "format" in request.args:
+			fileformat = request.args["format"][0]
+		else:
+			fileformat = "jpg"
+		if fileformat == "jpg":
 			graboptions.append("-j")
 			graboptions.append("95")
-		elif self.fileformat == "png":
+		elif fileformat == "png":
 			graboptions.append("-p")
-		elif self.fileformat != "bmp":
-			self.fileformat = "bmp"
+		elif fileformat != "bmp":
+			fileformat = "bmp"
 
-		if "r" in request.args.keys():
+		if "r" in request.args:
 			size = request.args["r"][0]
 			graboptions.append("-r")
 			graboptions.append("%d" % int(size))
 
-		if "mode" in request.args.keys():
+		if "mode" in request.args:
 			mode = request.args["mode"][0]
 			if mode == "osd":
 				graboptions.append("-o")
 			elif mode == "video":
 				graboptions.append("-v")
-
+		self.container = eConsoleAppContainer()
+		self.container.appClosed.append(self.grabFinished)
+		self.container.stdoutAvail.append(request.write)
+		self.container.setBufferSize(32768)
+		self.container.execute(GRAB_PATH, *graboptions)
 		try:
-			ref = self.session.nav.getCurrentlyPlayingServiceReference().toString()
+			ref = session.nav.getCurrentlyPlayingServiceReference().toString()
+			sref = '_'.join(ref.split(':', 10)[:10])
 		except:
-			ref = None 
-
-		if ref is not None:
-			self.sref = '_'.join(ref.split(':', 10)[:10])
-		else:
-			self.sref = 'screenshot'
-
-		self.filepath = "/tmp/screenshot." + self.fileformat
-		graboptions.append(self.filepath)
-		self.container.execute(GRAB_PATH, *graboptions)
-		return server.NOT_DONE_YET
-
-	def grabData(self, data):
-		print "[W] grab:", data,
+			sref = 'screenshot'
+		request.notifyFinish().addErrback(self.requestAborted)
+		request.setHeader('Content-Disposition', 'inline; filename=%s.%s;' % (sref, fileformat))
+		request.setHeader('Content-Type','image/%s' % fileformat.replace("jpg","jpeg"))
+		request.setHeader('Expires','Sat, 26 Jul 1997 05:00:00 GMT')
+		request.setHeader('Cache-Control','no-store, no-cache, must-revalidate, post-check=0, pre-check=0')
+		request.setHeader('Pragma','no-cache')
+
+	def requestAborted(self, err):
+		# Called when client disconnected early, abort the process and
+		# don't call request.finish()
+		del self.container.appClosed[:]
+		self.container.kill()
+		del self.request
+		del self.container
 
 	def grabFinished(self, retval = None):
-		fileformat = self.fileformat
-		if fileformat == "jpg":
-			fileformat = "jpeg"
-		try:
-			fd = open(self.filepath)
-			data = fd.read()
-			fd.close()
-			self.request.setHeader('Content-Disposition', 'inline; filename=%s.%s;' % (self.sref,self.fileformat))
-			self.request.setHeader('Content-Type','image/%s' % fileformat)
-			self.request.setHeader('Content-Length', '%i' % len(data))
-			self.request.write(data)
-		except Exception, error:
-			self.request.setResponseCode(http.OK)
-			self.request.write("Error creating screenshot:\n %s" % error)
-		try:
-			os.unlink(self.filepath)
-		except:
-			print "Failed to remove:", self.filepath
 		try:
 			self.request.finish()
 		except RuntimeError, error:
 			print "[OpenWebif] grabFinished error: %s" % error
+		# Break the chain of ownership
 		del self.request
-		del self.filepath
+
+class grabScreenshot(resource.Resource):
+	def __init__(self, session, path = None):
+		resource.Resource.__init__(self)
+		self.session = session
+
+	def render(self, request):
+		# Add a reference to the grabber to the Request object. This keeps
+		# the object alive at least until the request finishes
+		request.grab_in_progress = GrabRequest(request, self.session)
+		return server.NOT_DONE_YET
+
